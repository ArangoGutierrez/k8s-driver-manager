# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default:
  image: docker:stable
  services:
    - docker:stable-dind

variables:
  IMAGE_NAME: k8s-driver-manager
  DOCKERHUB_REGISTRY: "docker.io"

# Define the following dummy step for specifying make targets through the DIST variable
.target-ubi8:
  variables:
    DIST: ubi8

# The .build step forms the base of the image builds with each variant
# defined as a build-${VARIANT} step.
.build:
  stage: build
  variables:
    REGISTRY: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHA}"
  before_script:
    - apk add make
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - make build-${DIST}
    - make push-${DIST}

build-ubi8:
  extends:
    - .build
    - .target-ubi8

# .deploy forms the base of the deployment jobs which push images to the CI registry.
# This is extended with the version to be deployed (e.g. the SHA or TAG) and the
# target distribution.
.deploy:
  stage: deploy
  before_script:
    # In the case where we are deploying a different version to the CI_COMMIT_SHA, we
    # need to tag the image.
    # Note: a leading 'v' is stripped from the version if present
    - 'echo Version: ${VERSION} ; [[ -n "${VERSION}" ]] || exit 1'
    - apk add --no-cache make bash
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}-${DIST}"
  script:
    - docker tag "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}-${DIST}" "${OUT_IMAGE}:${VERSION}-${DIST}"
    # Log in to the "output" registry, tag the image and push the image
    - 'echo "Logging in to output registry ${OUT_REGISTRY}"'
    - docker logout
    - docker login -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}" "${OUT_REGISTRY}"
    - make IMAGE=${OUT_IMAGE} VERSION=${VERSION} push-${DIST}

# .deploy:sha sets the internal deployment version to the git SHA and deploys to the CI
# container registry
.deploy:sha-ci:
  extends: .deploy
  variables:
    VERSION: "${CI_COMMIT_SHA}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}"

deploy:sha-ci-ubi8:
  extends:
    - .deploy:sha-ci
    - .target-ubi8
  dependencies:
    - build-ubi8

# A release job is a deployment job that has a different output version / image
.release:
  extends: .deploy
  stage: release
  variables:
    # We use the CI_COMMIT_SHORT_SHA and override this for external releases
    VERSION: "${CI_COMMIT_SHORT_SHA}"

# Define a staging release step that pushes an image to an internal "staging" repository
# This is triggered for all pipelines (i.e. not only tags) to test the pipeline steps
# outside of the release process.
.release:staging:
  extends: .release
  variables:
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE: "${CI_REGISTRY_IMAGE}/staging/${IMAGE_NAME}"

.release:external:
  extends: .release
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "${CI_COMMIT_TAG}"
    - if: $CI_COMMIT_BRANCH == $RELEASE_DEVEL_BRANCH
      variables:
        VERSION: "${RELEASE_DEVEL_TAG}"

release:staging-ubi8:
  extends:
    - .release:staging
    - .target-ubi8
  dependencies:
    - deploy:sha-ci-ubi8
